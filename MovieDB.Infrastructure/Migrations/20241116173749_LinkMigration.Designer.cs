// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDB.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieDB.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241116173749_LinkMigration")]
    partial class LinkMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CertificationEpisode", b =>
                {
                    b.Property<string>("CertificationId")
                        .HasColumnType("text");

                    b.Property<string>("EpisodesId")
                        .HasColumnType("text");

                    b.HasKey("CertificationId", "EpisodesId");

                    b.HasIndex("EpisodesId");

                    b.ToTable("EpisodeCertifications", (string)null);
                });

            modelBuilder.Entity("CertificationMedia", b =>
                {
                    b.Property<string>("CertificationId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.HasKey("CertificationId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaCertifications", (string)null);
                });

            modelBuilder.Entity("CertificationSeason", b =>
                {
                    b.Property<string>("CertificationId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonsId")
                        .HasColumnType("text");

                    b.HasKey("CertificationId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("SeasonCertifications", (string)null);
                });

            modelBuilder.Entity("EpisodeProductionCompany", b =>
                {
                    b.Property<string>("EpisodesId")
                        .HasColumnType("text");

                    b.Property<string>("ProductionCompaniesId")
                        .HasColumnType("text");

                    b.HasKey("EpisodesId", "ProductionCompaniesId");

                    b.HasIndex("ProductionCompaniesId");

                    b.ToTable("EpisodeProductionCompanies", (string)null);
                });

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.HasKey("GenresId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaGenres", (string)null);
                });

            modelBuilder.Entity("KeywordMedia", b =>
                {
                    b.Property<string>("KeywordsId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.HasKey("KeywordsId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaKeywords", (string)null);
                });

            modelBuilder.Entity("MediaProductionCompany", b =>
                {
                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("ProductionCompaniesId")
                        .HasColumnType("text");

                    b.HasKey("MediaId", "ProductionCompaniesId");

                    b.HasIndex("ProductionCompaniesId");

                    b.ToTable("MediaProductionCompanies", (string)null);
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Award", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nominee")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.CastMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.ToTable("CastMembers");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Certification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.CrewMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("text");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Episode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Filming")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<string>("Plot")
                        .HasColumnType("text");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.ExternalIds", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Imdb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metacritic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Moviedb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Rottentomatoes")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Tvdb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("ExternalIds");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Keyword", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Like", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EpisodeId")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Link", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaId1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("MediaId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Media", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<float?>("BoxOffice")
                        .HasColumnType("real");

                    b.Property<float?>("Budget")
                        .HasColumnType("real");

                    b.PrimitiveCollection<string[]>("Country")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Filming")
                        .HasColumnType("text");

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.PrimitiveCollection<string[]>("Language")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<int?>("MoviedbId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<string>("Plot")
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<string>("Rated")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Released")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Runtime")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.PrimitiveCollection<string[]>("SpokenLanguages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TotalSeasons")
                        .HasColumnType("integer");

                    b.Property<int?>("TvdbId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<string>("BirthName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deathday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<float?>("Popularity")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.PersonExternalIds", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Imdb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Moviedb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tvdb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonExternalIds");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Popularity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Moviedb")
                        .HasColumnType("real");

                    b.Property<float?>("Stremio")
                        .HasColumnType("real");

                    b.Property<float?>("StremioLib")
                        .HasColumnType("real");

                    b.Property<float?>("Trakt")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Popularities");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.ProductionCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Season", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filming")
                        .HasColumnType("text");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<string>("Plot")
                        .HasColumnType("text");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Trailer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Translation.MediaTranslation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Filming")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plot")
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("MediaTranslation");
                });

            modelBuilder.Entity("ProductionCompanySeason", b =>
                {
                    b.Property<string>("ProductionCompaniesId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonsId")
                        .HasColumnType("text");

                    b.HasKey("ProductionCompaniesId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("SeasonProductionCompanies", (string)null);
                });

            modelBuilder.Entity("CertificationEpisode", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CertificationMedia", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CertificationSeason", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EpisodeProductionCompany", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMedia", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeywordMedia", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaProductionCompany", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Award", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Awards")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.CastMember", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Episode", "Episode")
                        .WithMany("Cast")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Cast")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Person", "Person")
                        .WithMany("CastRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Episode", "Episode")
                        .WithMany("Comments")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");

                    b.HasOne("MovieDB.Domain.Entities.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("PersonId");

                    b.HasOne("MovieDB.Domain.Entities.Season", "Season")
                        .WithMany("Comments")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Episode");

                    b.Navigation("Media");

                    b.Navigation("Person");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.CrewMember", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Episode", "Episode")
                        .WithMany("Crew")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Crew")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Person", "Person")
                        .WithMany("CrewRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Episode", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.ExternalIds", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithOne("ExternalIds")
                        .HasForeignKey("MovieDB.Domain.Entities.ExternalIds", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Like", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Episode", "Episode")
                        .WithMany("Likes")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");

                    b.HasOne("MovieDB.Domain.Entities.Person", "Person")
                        .WithMany("Likes")
                        .HasForeignKey("PersonId");

                    b.HasOne("MovieDB.Domain.Entities.Season", "Season")
                        .WithMany("Likes")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Episode");

                    b.Navigation("Media");

                    b.Navigation("Person");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Link", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", null)
                        .WithMany("Links")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.PersonExternalIds", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Person", "Person")
                        .WithOne("ExternalIds")
                        .HasForeignKey("MovieDB.Domain.Entities.PersonExternalIds", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Popularity", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithOne("Popularities")
                        .HasForeignKey("MovieDB.Domain.Entities.Popularity", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Season", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Seasons")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Trailer", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Trailers")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Translation.MediaTranslation", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.Media", "Media")
                        .WithMany("Translations")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ProductionCompanySeason", b =>
                {
                    b.HasOne("MovieDB.Domain.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDB.Domain.Entities.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Episode", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Comments");

                    b.Navigation("Crew");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Media", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("ExternalIds");

                    b.Navigation("Links");

                    b.Navigation("Popularities");

                    b.Navigation("Seasons");

                    b.Navigation("Trailers");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Person", b =>
                {
                    b.Navigation("CastRoles");

                    b.Navigation("Comments");

                    b.Navigation("CrewRoles");

                    b.Navigation("ExternalIds");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MovieDB.Domain.Entities.Season", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
