input {
  jdbc {
    type => "media"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    jdbc_validate_connection => true
    jdbc_validation_timeout => 3600
    jdbc_paging_enabled => true
    jdbc_page_size => 50000
    sql_log_level => "error"
    jdbc_fetch_size => 50000
    schedule => "${SYNC_INTERVAL}"
    statement_filepath => "/usr/share/logstash/sql/media.sql"
    tracking_column => "updated"
    tracking_column_type => "numeric"
    use_column_value => true
    clean_run => true
    last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run_media"
    connection_retry_attempts => 3
    connection_retry_attempts_wait_time => 10
    parameters => { 
      "sql_last_value" => "0"
    }
  }
}

filter {
  json {
    source => "genres"
    target => "genres"
    skip_on_invalid_json => true
  }
  
  json {
    source => "keywords"
    target => "keywords"
    skip_on_invalid_json => true
  }
  
  json {
    source => "productioncompanies"
    target => "productionCompanies"
    skip_on_invalid_json => true
  }
  
  json {
    source => "maincast"
    target => "mainCast"
    skip_on_invalid_json => true
  }
  
  json {
    source => "creators"
    target => "creators"
    skip_on_invalid_json => true
  }
  
  mutate {
    remove_field => ["@version", "@timestamp", "maincast", "productioncompanies"]
  }

  ruby {
    code => '
      def array_to_string(arr)
        return "" if arr.nil?
        arr.compact.join(" | ")
      end

      event.set("genres_string", array_to_string(event.get("genres")))
      event.set("keywords_string", array_to_string(event.get("keywords")))
      
      # Create searchable cast string
      cast = event.get("mainCast")
      if cast
        cast_names = cast.map { |c| c["personName"] }.compact
        event.set("cast_string", cast_names.join(" | "))
      end

      # Create searchable creators string
      creators = event.get("creators")
      if creators
        creator_names = creators.map { |c| c["name"] }.compact
        event.set("creators_string", creator_names.join(" | "))
      end
    '
  }
}

output {
    elasticsearch {
        hosts => [
          "${ELASTIC_URL}"
        ]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_enabled => true
        index => "${MEDIA_INDEX}"
        ecs_compatibility => v8
        document_id => "%{id}"
        action => "index"
        codec => json
        failure_type_logging_whitelist => []
      }
}