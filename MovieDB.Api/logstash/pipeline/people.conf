input {
  jdbc {
    type => "people"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    jdbc_validate_connection => true
    jdbc_validation_timeout => 3600
    schedule => "${SYNC_INTERVAL}"
    statement_filepath => "/usr/share/logstash/sql/people.sql"
    tracking_column => "updated"
    tracking_column_type => "numeric"
    use_column_value => true
    clean_run => true
    last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run_people"
    connection_retry_attempts => 3
    connection_retry_attempts_wait_time => 10
    sql_log_level => "error"
    parameters => { 
      "sql_last_value" => "0"
    }
  }
}

filter {
  json {
      source => "notableworks"
      target => "notableWorks"
      skip_on_invalid_json => true
  }

  mutate {
    remove_field => ["@version", "@timestamp", "notableworks"]
  }

  ruby {
    code => '
      works = event.get("notable_works")
      if works
        titles = works.map { |w| w["title"] }.compact
        event.set("works_string", titles.join(" | "))
      end
    '
  }
}

output {
    elasticsearch {
            hosts => [
              "${ELASTIC_URL}"
            ]
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            index => "${PEOPLE_INDEX}"
            ssl_enabled => true
            ecs_compatibility => v8
            document_id => "%{id}"
            action => "index"
            id => "elasticsearch_people_output"
            codec => json
            failure_type_logging_whitelist => []
          }
}
